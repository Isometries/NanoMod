#!/sbin/sh

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false

# Default permissions
umask 022

OUTFD=$2
ZIP=$3

##########################################################################################
# Misc. Functions
##########################################################################################

ui_print() {
	if $BOOTMODE; then
		echo "$1"
	else 
		echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
		echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
	fi
}

grep_prop() {
	shift
	FILES=$@
	if [ -z "$FILES" ]; then
		FILES='/system/build.prop'
	fi
	cat $FILES 2>/dev/null | sed -n "s/^$1=//p" | head -n 1
}

is_mounted() {
	if [ ! -z "$2" ]; then
		cat /proc/mounts | grep $1 | grep $2, >/dev/null
	else
		cat /proc/mounts | grep $1 >/dev/null
	fi
	return $?
}

mount_image() {
	if [ ! -d "$2" ]; then
		mount -o rw,remount rootfs /
		mkdir -p "$2" 2>/dev/null
		$BOOTMODE && mount -o ro,remount rootfs /
		[ ! -d "$2" ] && return 1
	fi

	if ! is_mounted "$2"; then
		LOOPDEVICE=
		for LOOP in 0 1 2 3 4 5 6 7; do
			if ! is_mounted "$2"; then
				LOOPDEVICE=/dev/block/loop$LOOP
				[ -e $LOOPDEVICE ] || mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
				losetup $LOOPDEVICE "$1" && mount -t ext4 -o loop $LOOPDEVICE "$2"
				if is_mounted "$2"; then
					break;
				fi
			fi
		done
	fi
}

set_perm() {
	chown $2:$3 $1 || exit 1
	chmod $4 $1 || exit 1
	if [ ! -z "$5" ]; then
		chcon $5 $1 2>/dev/null
	else
		chcon 'u:object_r:system_file:s0' $1 2>/dev/null
	fi
}

set_perm_recursive() {
	find $1 -type d 2>/dev/null | while read dir; do
		set_perm $dir $2 $3 $4 $6
	done
	find $1 -type f 2>/dev/null | while read file; do
		set_perm $file $2 $3 $5 $6
	done
}

set_perm_dir () {
	set_perm_recursive $1 root root 0755 0644
}

set_perm_data () {
	set_perm $1 root root 0644
}

set_perm_bin () {
	set_perm $1 root root 0755
}

mktouch() {
	mkdir -p ${1%/*}
	if [ -z "$2" ]; then
		touch $1
	else
		echo $2 > $1
	fi
	chmod 644 $1
}

request_size_check() {
	reqSizeM=`unzip -l "$1" 2>/dev/null | tail -n 1 | awk '{ print $1 }'`
	reqSizeM=$((reqSizeM / 1048576 + 1))
}

image_size_check() {
	e2fsck -yf $1
	curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
	curUsedM=`echo "$curBlocks" | cut -d/ -f1`
	curSizeM=`echo "$curBlocks" | cut -d/ -f1`
	curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
	curUsedM=$((curUsedM * 4 / 1024 + 1))
	curSizeM=$((curSizeM * 4 / 1024))
}

detect_outfd () {
	readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
	if [ "$?" -eq "0" ]; then
		OUTFD=0

		for FD in `ls /proc/$$/fd`; do
			readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
			if [ "$?" -eq "0" ]; then
				ps | grep " 3 $FD " | grep -v grep >/dev/null
				if [ "$?" -eq "0" ]; then
					OUTFD=$FD
					break
				fi
			fi
		done
	fi
}

error () {
	ui_print "${@}"
	exit 1
}

##########################################################################################
# Architecture detection
##########################################################################################

detect_arch () {
	API=`grep_prop ro.build.version.sdk`
	ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
	ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
	ABILONG=`grep_prop ro.product.cpu.abi`

	ARCH=arm
	IS64BIT=false

	if [ "$ABI" = "x86" ]; then
		ARCH=x86
	fi;

	if [ "$ABI2" = "x86" ]; then
		ARCH=x86
	fi;

	if [ "$ABILONG" = "arm64-v8a" ]; then
		ARCH=arm64
		IS64BIT=true
	fi

	if [ "$ABILONG" = "x86_64" ]; then
		ARCH=x64
		IS64BIT=true
	fi
}

##########################################################################################
# Magisk Mode Installation
##########################################################################################

grow_magisk_img () {
	image_size_check $IMG
	if [ "$reqSizeM" -gt "$curFreeM" ]; then
		SIZE=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
		resize2fs -f $IMG ${SIZE}M
		e2fsck -yf $IMG
	fi
}

shrink_magisk_img () {
	image_size_check $IMG
	NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
	if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
		resize2fs -f $IMG ${NEWDATASIZE}M
		e2fsck -yf $IMG
	fi
}

magisk_install_init () {
	if $BOOTMODE && ! is_mounted /magisk; then
		error "! Magisk is not activated!... abort"
	fi

	# Fix SuperSU.....
	$BOOTMODE && $BINDIR/sepolicy-inject --live "allow fsck * * *"

	MOUNTPATH=/magisk
	IMGNAME=magisk.img

	if $BOOTMODE; then
		MOUNTPATH=/dev/magisk_merge
		IMGNAME=magisk_merge.img
	fi

	MODPATH=$MOUNTPATH/$MODID

	mkdir -p $INSTALLER
	cd $INSTALLER
	unzip -o "$ZIP" "common/*" module.prop
}

magisk_install_dirs () {
	rm -rf $MODPATH 2>/dev/null
	mkdir -p $MODPATH
	mkdir $MODPATH/system
	for dir in app priv-app; do
		mkdir $MODPATH/system/$dir
	done
}

magisk_install_setup () {
	ui_print " > setup Magisk environment"

	if is_mounted /data; then
		IMG=/data/$IMGNAME
	else
		IMG=/cache/magisk.img
		ui_print " "
		ui_print "***********************************"
		ui_print "*      !! Data unavailable !!     *"
		ui_print "* Magisk detection is impossible  *"
		ui_print "* Installation will still proceed *"
		ui_print "*  But please make sure you have  *"
		ui_print "*        Magisk installed!!       *"
		ui_print "***********************************"
		ui_print " "
	fi

	request_size_check "$ZIP"

	if [ -f "$IMG" ]; then
		grow_magisk_img
	else
		SIZE=$((reqSizeM / 32 * 32 + 64));
		make_ext4fs -l ${SIZE}M -a /magisk -S $INSTALLER/common/file_contexts_image $IMG
	fi

	mount_image $IMG $MOUNTPATH
	if ! is_mounted $MOUNTPATH; then
		error "! $IMG mount failed... abort"
	fi
}

magisk_install_finish () {
	# Handle replace folders
	for TARGET in $REPLACE; do
		mktouch $MODPATH$TARGET/.replace
	done

	# Auto Mount
	if $AUTOMOUNT; then
		mktouch $MODPATH/auto_mount
	fi

	# prop files
	if $PROPFILE; then
		cp -af $INSTALLER/common/system.prop $MODPATH/system.prop
	fi

	# Module info
	cp -af $INSTALLER/module.prop $MODPATH/module.prop

	if $BOOTMODE; then
		# Update info for Magisk Manager
		mktouch /magisk/$MODID/update
		cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
	fi

	# post-fs-data mode scripts
	if $POSTFSDATA; then
		cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
	fi

	# service mode scripts
	if $LATESTARTSERVICE; then
		cp -af $INSTALLER/common/service.sh $MODPATH/service.sh
	fi
}

magisk_install_cleanup () {
	umount $MOUNTPATH
	losetup -d $LOOPDEVICE
	rmdir $MOUNTPATH

	# Shrink the image if possible
	shrink_magisk_img
}

##########################################################################################
# Generic Installation
##########################################################################################

install_init () {
	mkdir -p $TMPDIR 2>/dev/null
	cd $TMPDIR
	unzip -o "$ZIP" config.sh

	if [ ! -f "config.sh" ]; then
		error "! Failed: Unable to extract zip file!"
	fi

	source config.sh

	INSTALLER=$TMPDIR/$MODID
	mkdir -p ${INSTALLER}
}

install_fdroid () {
	cp -r ${INSTALLER}/system/app/FDroid \
		${MODPATH}/system/app/
	cp -r ${INSTALLER}/system/priv-app/FDroidPrivileged \
		${MODPATH}/system/priv-app/
	set_perm_dir ${MODPATH}/system/app/FDroid
	set_perm_dir ${MODPATH}/system/priv-app/FDroidPrivileged
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

detect_outfd

umount /system 2>/dev/null
umount /vendor 2>/dev/null
umount /data 2>/dev/null
umount /cache 2>/dev/null

mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

if [ ! -f '/system/build.prop' ]; then
	error "! /system/build.prop does not exist"
fi

detect_arch

MODE=MAGISK

if [ ! -f /data/magisk.img ]; then
	MODE=SYSTEM
fi

# This path should work in any cases
TMPDIR=/dev/tmp

install_init

if [ "${MODE}" = "MAGISK" ]; then
	magisk_install_init
else
	mount -orw,remount /system 2>/dev/null || \
		error "! failed to re-mount /system read-write"
	unset MODPATH
fi

##########################################################################################
# Main
##########################################################################################

# Please leave this message in your flashable zip for credits :)
ui_print " "
ui_print "******************************"
ui_print "     NanoMod 9.3.20170623     "
ui_print "      created by @Nanolx      "
ui_print "       F-Droid package        "

if [ "${MODE}" = "MAGISK" ]; then
	ui_print "Powered by Magisk (@topjohnwu)"
fi

ui_print "******************************"
ui_print " "

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

if [ "${MODE}" = "MAGISK" ]; then
	magisk_install_setup
fi

ui_print " > prepare installation"
cd ${INSTALLER}
unzip -o "$ZIP" "system/*"

if [ "${MODE}" = "MAGISK" ]; then
	ui_print " > Installing NanoMod (magisk module)"
else	ui_print " > Installing NanoMod (system mode)"
fi

if [ "${MODE}" = "MAGISK" ]; then
	magisk_install_dirs
fi

install_fdroid

if [ "${MODE}" = "MAGISK" ]; then
	magisk_install_finish
fi

if [ "$NO_NANOMODSETUP" -eq 1 ]; then
	rm $nanomodsetup
fi

ui_print " "
ui_print " Thanks for using NanoMod "
ui_print " "

if [ "${MODE}" = "MAGISK" ];then
	magisk_install_cleanup
fi

if ! $BOOTMODE; then
	umount /system 2>/dev/null
	umount /vendor 2>/dev/null
fi

exit 0
