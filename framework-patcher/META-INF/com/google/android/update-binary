#!/sbin/sh

OUTFD=$2
ZIP=$3

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

ui_print() {
  echo -n -e "ui_print $@\n" >> /proc/self/fd/$OUTFD
  echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

error () {
	ui_print "${@}"
	ui_print " "
	ui_print " ** post your /tmp/recovery.log"
	ui_print " ** in the XDA support thread"
	ui_print " "
	exit 1
}

request_size_check() {
  reqSizeM=`unzip -l "$1" 2>/dev/null | tail -n 1 | awk '{ print $1 }'`
  reqSizeM=$((reqSizeM / 1048576 + 1))
}

image_size_check() {
  e2fsck -yf $1
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

grow_magisk_img () {
	request_size_check /tmp/services.jar
	image_size_check /data/magisk.img
	if [ "$reqSizeM" -gt "$curFreeM" ]; then
		SIZE=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
		resize2fs -f /data/magisk.img ${SIZE}M
		e2fsck -yf /data/magisk.img
	fi
}

shrink_magisk_img () {
	image_size_check /data/magisk.img
	NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
	if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
		resize2fs -f /data/magisk.img ${NEWDATASIZE}M
		e2fsck -yf /data/magisk.img
	fi
}

if ! (is_mounted /system); then
	mount -orw /system || error " !! failed to mount /system"
else	mount -orw,remount /system || error " !! failed to remount /system read-write"
fi

BASEDIR="/tmp/dexpatcher"

SDK_VERSION=$(awk -F= '/^ro.build.version.sdk/{print $2}' /system/build.prop)

ABI=$(getprop ro.product.cpu.abi | cut -c-3)
ABI2=$(getprop ro.product.cpu.abi2 | cut -c-3)

if [ -n "$(find '/system/app/' -name '*.odex')" ]; then
	error " !! odexed ROMs are not supported"
fi

PATH="$PATH:/system/bin:/system/xbin"

mount_image() {
	if [ ! -d "$2" ]; then
		mount -o rw,remount rootfs /
		mkdir -p "$2" 2>/dev/null
		$BOOTMODE && mount -o ro,remount rootfs /
		[ ! -d "$2" ] && return 1
	fi

	if ! is_mounted "$2"; then
		LOOPDEVICE=
		for LOOP in 0 1 2 3 4 5 6 7; do
			if ! is_mounted "$2"; then
				LOOPDEVICE=/dev/block/loop$LOOP
				[ -e $LOOPDEVICE ] || mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
				losetup $LOOPDEVICE "$1" && mount -t ext4 -o loop $LOOPDEVICE "$2"
				if is_mounted "$2"; then
					break;
				fi
			fi
		done
	fi
}

apply_patch () {

	if [ "${SDK_VERSION}" -gt 21 ]; then
		mkdir -p "${1}"
	fi

	LD_LIBRARY_PATH="${DP_LD}" \
		dalvikvm -cp "${BASEDIR}/dexpatcher.dex" \
			lanchon.dexpatcher.Main \
			"${DEX_OPTS}" --api-level "${SDK_VERSION}" \
			--verbose --output "${1}" "${2}" "${3}" || \
				error " !! dexpatcher failed"

	LD_LIBRARY_PATH="${DP_LD}" \
		${ZIP} -d "${2}" 'classes*.dex' || \
		error " !! zip failed"

	LD_LIBRARY_PATH="${DP_LD}" \
		${ZIP} -j "${2}" "${1}"/classes*.dex || \
		error " !! zip failed"

	rm -rf "${1}"

}

if [ "${SDK_VERSION}" -gt 25 ]; then
	ui_print " !! Android versions beyond Nougat are not yet supported"
	exit 1
fi

if [ "${SDK_VERSION}" -lt 16 ]; then
	ui_print " !! Android versions before Jelly Bean are not supported"
	exit 1
fi

ui_print " "
ui_print "********************************"
ui_print "      NanoMod 9.4.20171231     "
ui_print "       created by @Nanolx       "
ui_print "       Framework Patcher        "
ui_print "Powered by DexPatcher (@lanchon)"
ui_print "********************************"
ui_print " "

if [ "${SDK_VERSION}" -lt 24 ]; then
	ui_print " > Android 4.1 - 6.0 (SDK ${SDK_VERSION}) detected"
	PATCH_HOOK="hook_4.1-6.0_services.jar.dex"
else
	ui_print " > Android 7.x (SDK ${SDK_VERSION}) detected"
	PATCH_HOOK="hook_7.x_services.jar.dex"
fi

PATCH_CORE="core_services.jar.dex"

ui_print " > preparing environment"

unzip -o "$3" "dexpatcher/*" -d /tmp

for bin in zip.arm zip.x86 file.arm file.x86; do 
	chmod 0755 "${BASEDIR}/${bin}"
done

ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
ABILONG=`grep_prop ro.product.cpu.abi`

ARCH=arm
IS64BIT=false

if [ "$ABI" = "x86" ]; then
	ARCH=x86
fi

if [ "$ABI2" = "x86" ]; then
	ARCH=x86
fi

if [ "$ABILONG" = "arm64-v8a" ]; then
	ARCH=arm64
fi

if [ "$ABILONG" = "x86_64" ]; then
	ARCH=x86_64
fi

case ${ARCH} in
	arm | arm64 )
			FILE=${BASEDIR}/file.arm
			ZIP=${BASEDIR}/zip.arm
	;;
	x86 | x86_64 )
			FILE=${BASEDIR}/file.x86
			ZIP=${BASEDIR}/zip.x86
	;;
esac

DALVIK_ARCH=$("${FILE}" -L /system/bin/dalvikvm)

if [[ "${DALVIK_ARCH}" == *32-bit* ]]; then
	DP_LD="/system/lib:$LD_LIBRARY_PATH"
elif [[ "${DALVIK_ARCH}" == *64-bit* ]]; then
	DP_LD="/system/lib64:/system/lib:$LD_LIBRARY_PATH"
else	error " !! could not detect dalvikvm architecture"
fi

ui_print " > patching services.jar"
ui_print " "
ui_print " << this might take a few minutes,"
ui_print " << depending on your device's power"
ui_print " "

if [ "${SDK_VERSION}" -gt 21 ]; then
	DEX_OPTS="--multi-dex"
fi

if ! (is_mounted /data); then
	mount -orw /data || error " !! failed to mount /data"
fi

cp /system/framework/services.jar \
	/tmp/services.jar || \
	error " !! failed to copy services.jar"

ui_print " >> [1/2] applying hook patch"
apply_patch /tmp/services.jar-hook \
	/tmp/services.jar \
	"${BASEDIR}/${PATCH_HOOK}" || \
	error "failed to patch services.jar with ${PATCH_HOOK}"

ui_print " >> [2/2] applying core patch"
apply_patch /tmp/services.jar-hook-core \
	/tmp/services.jar \
	"${BASEDIR}/${PATCH_CORE}" || \
	error "failed to patch services.jar with ${PATCH_CORE}"

if [ -f /data/magisk.img ]; then
	grow_magisk_img || \
		error " !! failed to grow magisk.img"
	mount_image /data/magisk.img /magisk || \
		error " !! failed to mount /magisk"
fi

ui_print " "
if [ -d /magisk/NanoMod ]; then
	ui_print " << installing services.jar to: NanoMod (full)"
	install_path="/magisk/NanoMod/system/framework/"
elif [ -d /magisk/NanoModmicroG ]; then
	ui_print " << installing services.jar to: NanoMod (microG)"
	install_path="/magisk/NanoModmicroG/system/framework/"
else
	ui_print " << installing services.jar to: ROM"
	install_path="/system/framework"
fi

mkdir -p "${install_path}"
cp /tmp/services.jar "${install_path}/" \
	|| error " !! failed to install services.jar"

touch /system/.nanomod-patcher

ui_print " >> clean up"
if (is_mounted /magisk); then
	umount /magisk
	losetup -d $LOOPDEVICE
	rmdir /magisk
	shrink_magisk_img || \
		error " !! failed to shrink magisk.img"
fi

umount /data
umount /system

rm /tmp/services.jar

ui_print " "
ui_print " > Done!"
ui_print " "
ui_print "Thanks for using NanoMod"
ui_print " "

exit 0
