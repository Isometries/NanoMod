#!/sbin/sh

OUTFD=$2
ZIP=$3

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp

BASEDIR="${TMPDIR}/dexpatcher"
PATH="$PATH:/system/bin:/system/xbin"
PATCH_CORE="core_services.jar.dex"

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
	OUTFD=0
	for FD in `ls /proc/$$/fd`; do
		readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
		if [ "$?" -eq "0" ]; then
			ps | grep " 3 $FD " | grep -v grep >/dev/null
			if [ "$?" -eq "0" ]; then
				OUTFD=$FD
				break
			fi
		fi
	done
fi

ui_print() {
	if $BOOTMODE; then
		echo "$1"
	else 
		echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
		echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
	fi
}

is_mounted() {
	if [ ! -z "$2" ]; then
		cat /proc/mounts | grep $1 | grep $2, >/dev/null
	else
		cat /proc/mounts | grep $1 >/dev/null
	fi
	return $?
}

error () {
	ui_print "${@}"
	ui_print " "
	ui_print " ** post your /tmp/recovery.log"
	ui_print " ** in the XDA support thread"
	ui_print " "
	exit 1
}

request_size_check() {
	reqSizeM=`unzip -l "$1" 2>/dev/null | tail -n 1 | awk '{ print $1 }'`
	reqSizeM=$((reqSizeM / 1048576 + 1))
}

image_size_check() {
	e2fsck -yf $1
	curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`
	curUsedM=`echo "$curBlocks" | cut -d/ -f1`
	curSizeM=`echo "$curBlocks" | cut -d/ -f1`
	curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
	curUsedM=$((curUsedM * 4 / 1024 + 1))
	curSizeM=$((curSizeM * 4 / 1024))
}

grow_magisk_img () {
	request_size_check ${TMPDIR}/services.jar
	image_size_check ${IMG}
	if [ "$reqSizeM" -gt "$curFreeM" ]; then
		SIZE=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
		resize2fs -f ${IMG} ${SIZE}M
		e2fsck -yf ${IMG}
	fi
}

shrink_magisk_img () {
	image_size_check ${IMG}
	NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
	if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
		resize2fs -f ${IMG} ${NEWDATASIZE}M
		e2fsck -yf ${IMG}
	fi
}

grep_prop() {
	shift
	FILES=$@
	if [ -z "$FILES" ]; then
		FILES='/system/build.prop'
	fi
	cat $FILES 2>/dev/null | sed -n "s/^$1=//p" | head -n 1
}

detect_arch () {
	ABI=$(getprop ro.product.cpu.abi | cut -c-3)
	ABI2=$(getprop ro.product.cpu.abi2 | cut -c-3)
	ABILONG=`grep_prop ro.product.cpu.abi`

	ARCH=arm
	IS64BIT=false

	if [ "$ABI" = "x86" ]; then
		ARCH=x86
	fi

	if [ "$ABI2" = "x86" ]; then
		ARCH=x86
	fi

	if [ "$ABILONG" = "arm64-v8a" ]; then
		ARCH=arm64
	fi

	if [ "$ABILONG" = "x86_64" ]; then
		ARCH=x86_64
	fi

	case ${ARCH} in
		arm | arm64 )
				FILE=${BASEDIR}/file.arm
				ZIPB=${BASEDIR}/zip.arm
		;;
		x86 | x86_64 )
				FILE=${BASEDIR}/file.x86
				ZIPB=${BASEDIR}/zip.x86
		;;
	esac

	ui_print " > device architecture: ${ARCH}"
}

detect_sdk () {
	SDK_VERSION=$(awk -F= '/^ro.build.version.sdk/{print $2}' /system/build.prop)

	if [ "${SDK_VERSION}" -gt 25 ]; then
		error " !! Android versions beyond Nougat are not yet supported"
	fi

	if [ "${SDK_VERSION}" -lt 16 ]; then
		error " !! Android versions before Jelly Bean are not supported"
	fi

	if [ "${SDK_VERSION}" -lt 24 ]; then
		ui_print " > Android 4.1 - 6.0 (SDK ${SDK_VERSION}) detected"
		PATCH_HOOK="hook_4.1-6.0_services.jar.dex"
		PATCH_UI_SERVICES="ui_4.1-6.0_services.jar.dex"
		PATCH_UI_SETTINGS="ui_4.1-6.0_Settings.apk.dex"
	else
		ui_print " > Android 7.x (SDK ${SDK_VERSION}) detected"
		PATCH_HOOK="hook_7.x_services.jar.dex"
		PATCH_UI_SERVICES="ui_7.x_services.jar.dex"
		PATCH_UI_SETTINGS="ui_7.x_Settings.apk.dex"
	fi

	if [ "${SDK_VERSION}" -gt 21 ]; then
		DEX_OPTS="--multi-dex"
	fi
}

detect_odex () {
	if [ -n "$(find '/system/app/' -name '*.odex')" ]; then
		error " !! odexed ROMs are not supported"
	fi
}

store_info () {
	rm -f ${SYSPATH}/.nanomod-patcher
	for prop in ro.build.flavor ro.build.id ro.build.version.release; do
		grep "${prop}=" /system/build.prop >> ${SYSPATH}/.nanomod-patcher
	done
}

compare_info () {
	for prop in ro.build.flavor ro.build.id ro.build.version.release; do
		sys_prop=$(grep "${prop}=" /system/build.prop)
		nano_prop=$(grep "${prop}=" /system/.nanomod-patcher)
		if [ "${sys_prop}" = "${nano_prop}" ]; then
			info_result=${info_result}1
		else	info_result=${info_result}0
		fi
	done

	if [ "${info_result}" = "111" ]; then
		ui_print " ++ /system/.nanomod-patcher exists"
		ui_print " ++ and ROM info matches, exiting"
		ui_print " "
		exit 0
	else
		ui_print " ++ /system/.nanomod-patcher exists"
		ui_print " ++ but ROM info changed, assuming"
		ui_print " ++ ROM update/change, continuing"
		ui_print " "
	fi
}

detect_dalvik () {
	if [[ ! -f /system/bin/dalvikvm ]]; then
		error "!! /system/bin/dalvikvm does not exist"
	else	DALVIK_ARCH=$("${FILE}" -m "${BASEDIR}/magic.mgc" -L /system/bin/dalvikvm)
	fi

	case ${DALVIK_ARCH} in
		*32-bit* )
			DP_LD="/system/lib:$LD_LIBRARY_PATH"
			ui_print " > DalvikVM bitness: 32-bit"
		;;
		*64-bit* )
			DP_LD="/system/lib64:/system/lib:$LD_LIBRARY_PATH"
			ui_print " > DalvikVM bitness: 64-bit"
		;;
		* )
			error " !! could not detect dalvikvm architecture"
		;;
	esac
}

mount_image() {
	if [ ! -d "$2" ]; then
		mount -o rw,remount rootfs /
		mkdir -p "$2" 2>/dev/null
		$BOOTMODE && mount -o ro,remount rootfs /
		[ ! -d "$2" ] && return 1
	fi

	if ! is_mounted "$2"; then
		LOOPDEVICE=
		for LOOP in 0 1 2 3 4 5 6 7; do
			if ! is_mounted "$2"; then
				LOOPDEVICE=/dev/block/loop$LOOP
				[ -e $LOOPDEVICE ] || mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
				losetup $LOOPDEVICE "$1" && mount -t ext4 -o loop $LOOPDEVICE "$2"
				if is_mounted "$2"; then
					break;
				fi
			fi
		done
	fi
}

apply_patch () {
	if [ "${SDK_VERSION}" -gt 21 ]; then
		mkdir -p "${1}"
	fi

	LD_LIBRARY_PATH="${DP_LD}" \
		/system/bin/dalvikvm -cp "${BASEDIR}/dexpatcher.dex" \
			lanchon.dexpatcher.Main \
			"${DEX_OPTS}" --api-level "${SDK_VERSION}" \
			--verbose --output "${1}" "${2}" "${3}" || \
				error "${4}"

	LD_LIBRARY_PATH="${DP_LD}" \
		${ZIPB} -d "${2}" 'classes*.dex' || \
			error " !! zip failed"

	LD_LIBRARY_PATH="${DP_LD}" \
		${ZIPB} -j "${2}" "${1}"/classes*.dex || \
			error " !! zip failed"

	rm -rf "${1}"
}

setup_patcher () {
	ui_print " > preparing environment"

	mkdir -p ${TMPDIR}
	unzip -o "${ZIP}" "dexpatcher/*" -d ${TMPDIR}
	for bin in zip.arm zip.x86 file.arm file.x86; do 
		chmod 0755 "${BASEDIR}/${bin}"
	done
}

patch_services () {
	ui_print " "
	ui_print " > patching signature spoofing support"
	ui_print " "
	ui_print " << this might take a few minutes!"
	ui_print " "

	cp /system/framework/services.jar \
		${TMPDIR}/services.jar || \
		error " !! failed to copy services.jar"

	ui_print " >> [1/2] applying hook patch (services.jar)"
	apply_patch ${TMPDIR}/services.jar-hook \
		${TMPDIR}/services.jar \
		"${BASEDIR}/${PATCH_HOOK}" \
		" !! failed to apply ${PATCH_HOOK}"

	ui_print " >> [2/2] applying core patch (services.jar)"
	apply_patch ${TMPDIR}/services.jar-hook-core \
		${TMPDIR}/services.jar \
		"${BASEDIR}/${PATCH_CORE}" \
		" !! failed to apply ${PATCH_CORE}"

}

patch_services_ui () {
	cp /system/priv-app/Settings/Settings.apk \
		${TMPDIR}/Settings.apk || \
		error " !! failed to copy Settings.apk"

	ui_print " "
	ui_print " > patching signature spoofing user interface"
	ui_print " "
	ui_print " << this might take a few minutes!"
	ui_print " "

	ui_print " >> [1/2] applying ui patch (services.jar)"
	apply_patch ${TMPDIR}/services.jar-hook-core-ui \
		${TMPDIR}/services.jar \
		"${BASEDIR}/${PATCH_UI_SERVICES}" \
		" !! failed to apply ${PATCH_UI_SERVICES}"

	ui_print " >> [2/2] applying ui patch (Settings.apk)"
	apply_patch ${TMPDIR}/Settings.apk-ui \
		${TMPDIR}/Settings.apk \
		"${BASEDIR}/${PATCH_UI_SETTINGS}" \
		" !! failed to apply ${PATCH_UI_SETTINGS}"
}

install_services () {
	ui_print " "
	if [ "${MODE}" = "SYSTEM" ]; then
		ui_print " << backing up services.jar to: /sdcard"
		cp /system/framework/services.jar /sdcard || \
			error " !! failed to backup services.jar"

		if [ "${nanomod_sigspoofui}" -eq 1 ]; then
			ui_print " << backing up Settings.apk to: /sdcard"
			cp /system/priv-app/Settings/Settings.apk /sdcard || \
				error " !! failed to backup Settings.apk"
		fi

		ui_print " << installing patched files to: ROM"
		install_path="${SYSPATH}/"
	else
		if [ -d /dev/magisk_merge/NanoMod ]; then
			ui_print " << installing patched files to: NanoMod (full) [merge]"
			install_path="/magisk/NanoMod/system/framework/"
		elif [ -d /dev/magisk_merge//NanoModmicroG ]; then
			ui_print " << installing patched files to: NanoMod (microG) [merge]"
			install_path="/magisk/NanoModmicroG/system/"
		elif [ -d /magisk/NanoMod ]; then
			ui_print " << installing patched files to: NanoMod (full)"
			install_path="/magisk/NanoMod/system/"
		elif [ -d /magisk/NanoModmicroG ]; then
			ui_print " << installing patched files to: NanoMod (microG)"
			install_path="/magisk/NanoModmicroG/system/"
		else
			ui_print " << backing up services.jar to: /sdcard"
			cp /system/framework/services.jar /sdcard || \
				error " !! failed to backup services.jar"

			if [ "${nanomod_sigspoofui}" -eq 1 ]; then
				ui_print " << backing up Settings.apk to: /sdcard"
				cp /system/priv-app/Settings/Settings.apk /sdcard || \
					error " !! failed to backup Settings.apk"
			fi

			ui_print " << installing patched files to: ROM"
			install_path="${SYSPATH}"
		fi
	fi

	mkdir -p "${install_path}/framework"
	cp ${TMPDIR}/services.jar "${install_path}/framework" \
		|| error " !! failed to install services.jar"

	if [ "${nanomod_sigspoofui}" -eq 1 ]; then
		mkdir -p "${install_path}/priv-app/Settings"
		cp ${TMPDIR}/Settings.apk "${install_path}/priv-app/Settings" \
			|| error " !! failed to install Settings.apk"
	fi

	if [ "${install_path}" = "${SYSPATH}" ]; then
		echo /system/framework/services.jar >> \
			${SYSPATH}/.nanomod-list

		if [ "${nanomod_sigspoofui}" -eq 1 ]; then
			echo /system/priv-app/Settings/Settings.apk >> \
				${SYSPATH}/.nanomod-list
		fi
	fi

	store_info
}

magisk_cleanup () {
	if (is_mounted ${MOUNTPATH}); then
		umount ${MOUNTPATH}
		losetup -d $LOOPDEVICE
		rmdir ${MOUNTPATH}
		shrink_magisk_img || \
			error " !! failed to shrink ${IMG}"
	fi
}

# check for configuration files
config_locations="/sdcard /external_sd /persist $(dirname ${ZIP})) /data"

get_config () {
	config=""
	config_exists=0
	for path in ${config_locations}; do
		if test -r "${path}/${1}" -a -f "${path}/${1}"; then
			config="${path}/${1}"
			config_exists=1
			return
		fi
	done
}

ui_print " "
ui_print "********************************"
ui_print "      NanoMod 13.0.99999999     "
ui_print "       created by @Nanolx       "
ui_print "       Framework Patcher        "
ui_print "Powered by DexPatcher (@lanchon)"
ui_print "********************************"
ui_print " "

if ! ${BOOTMODE}; then
	if ! (is_mounted /system); then
		mount -orw /system
	else	mount -orw,remount /system
	fi
	SYSPATH=/system

	get_config .nanomod-setup
	if [ "$config_exists" -eq 1 ]; then
		source ${config}
		if [ "${nanomod_forcesystem}" -eq 1 ]; then
			MODE=SYSTEM
			ui_print " ++ forced system mode installation"
		fi
	fi
else
	mount -orw,remount /dev/magisk/mirror/system
	SYSPATH=/dev/magisk/mirror/system
fi

if [ -f /system/.nanomod-patcher ]; then
	compare_info
fi

detect_sdk
detect_odex

setup_patcher

detect_arch
detect_dalvik

if ! (is_mounted /data); then
	mount -orw /data || error " !! failed to mount /data"
else	mount -orw,remount /data || error " !! failed to remount /data read-write"
fi

if $BOOTMODE; then
	MOUNTPATH=/dev/magisk_merge
	IMG=/data/magisk_merge.img
else
	MOUNTPATH=/magisk
	IMG=/data/magisk.img
fi

if [ -f ${IMG} ]; then
	grow_magisk_img || \
		error " !! failed to grow ${IMG}"
	mount_image ${IMG} ${MOUNTPATH} || \
		error " !! failed to mount ${MOUNTPATH}"
fi

patch_services

if [ "${nanomod_sigspoofui}" -eq 1 ]; then
	patch_services_ui
fi

install_services

ui_print " "
ui_print " >> clean up"
magisk_cleanup

if ! ${BOOTMODE}; then
	umount /system
fi

ui_print " "
ui_print " > Done!"
ui_print " "
ui_print "Thanks for using NanoMod"
ui_print " "

exit 0
